{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"py-lerchs-grossmann","text":"<p>Open-pit optimization using the Lerchs-Grossmann algorithm in Python</p>"},{"location":"#overview","title":"Overview","text":"<p><code>py-lerchs-grossmann</code> is a Python package designed to apply the classical Lerchs-Grossmann algorithm for open-pit mining optimization. It enables modeling of block graphs and calculation of optimal pits.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install py_lerchs_grossmann\n</code></pre>"},{"location":"api/","title":"Referencia de la API","text":""},{"location":"api/#py_lerchs_grossmann.Add_value_tree_to_positive","title":"<code>Add_value_tree_to_positive(df_arc_positive, df_arc_direct_tree)</code>","text":"<p>Add values from <code>df_arc_direct_tree[\"value\"]</code> to <code>df_arc_positive[\"value\"]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>df_arc_positive</code> <code>DataFrame</code> <p>DataFrame containing the arcs selected by the Lerchs-Grossmann algorithm.</p> required <code>df_arc_direct_tree</code> <code>DataFrame</code> <p>A DataFrame representing the rebuilt tree structure, ordered from root to outermost nodes.</p> required Source code in <code>src/py_lerchs_grossmann/build_df.py</code> <pre><code>def Add_value_tree_to_positive(\n    df_arc_positive: pd.DataFrame, df_arc_direct_tree: pd.DataFrame\n):\n    \"\"\"\n    Add values from `df_arc_direct_tree[\"value\"]` to `df_arc_positive[\"value\"]`.\n\n    Parameters\n    ----------\n    df_arc_positive : pandas.DataFrame\n        DataFrame containing the arcs selected by the Lerchs-Grossmann algorithm.\n    df_arc_direct_tree:\n        A DataFrame representing the rebuilt tree structure, ordered from root to outermost nodes.\n    \"\"\"\n    # Primera condici\u00f3n: start_real == start_tree AND end_real == end_tree\n    merged_direct = df_arc_positive.merge(\n        df_arc_direct_tree,\n        left_on=[\"start_real\", \"end_real\"],\n        right_on=[\"start_tree\", \"end_tree\"],\n        how=\"left\",\n    )\n\n    # Segunda condici\u00f3n: start_real == end_tree AND end_real == start_tree\n    merged_inverse = df_arc_positive.merge(\n        df_arc_direct_tree,\n        left_on=[\"start_real\", \"end_real\"],\n        right_on=[\"end_tree\", \"start_tree\"],\n        how=\"left\",\n    )\n\n    # Llenar columna 'value' en df_arc_positive si est\u00e1 presente en cualquiera de los dos casos\n    df_arc_positive[\"value\"] = merged_direct[\"value_y\"].combine_first(\n        merged_inverse[\"value_y\"]\n    )\n</code></pre>"},{"location":"api/#py_lerchs_grossmann.build_df_arc_direct_tree","title":"<code>build_df_arc_direct_tree(df_arc_positive)</code>","text":"<p>Rebuild the tree structure of <code>df_arc_positive</code> from the root to its outermost nodes.</p> <p>Parameters:</p> Name Type Description Default <code>df_arc_positive</code> <code>DataFrame</code> <p>DataFrame containing the arcs selected by the Lerchs-Grossmann algorithm.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <code>A DataFrame representing the rebuilt tree structure, ordered from root to outermost nodes.</code> Source code in <code>src/py_lerchs_grossmann/build_df.py</code> <pre><code>def build_df_arc_direct_tree(df_arc_positive: pd.DataFrame):\n    \"\"\"\n    Rebuild the tree structure of `df_arc_positive` from the root to its outermost nodes.\n\n    Parameters\n    ----------\n    df_arc_positive : pandas.DataFrame\n        DataFrame containing the arcs selected by the Lerchs-Grossmann algorithm.\n\n    Returns\n    -------\n    pandas.DataFrame\n    A DataFrame representing the rebuilt tree structure, ordered from root to outermost nodes.\n    \"\"\"\n    # Add the arcs with `start_real` == 0 from `df_arc_positive` to `df_arc_direct_tree`\n    df_filtered = df_arc_positive[df_arc_positive[\"start_real\"] == 0][\n        [\"start_real\", \"end_real\"]\n    ]\n    df_filtered = df_filtered.rename(\n        columns={\"start_real\": \"start_tree\", \"end_real\": \"end_tree\"}\n    )\n    df_filtered[\"value\"] = np.nan\n    # Create `df_arc_direct_tree`\n    df_arc_direct_tree = df_filtered.reset_index(drop=True)\n\n    mask = ~(\n        (\n            df_arc_positive[\"start_real\"].isin(df_arc_direct_tree[\"start_tree\"])\n            &amp; df_arc_positive[\"end_real\"].isin(df_arc_direct_tree[\"end_tree\"])\n        )\n        | (\n            df_arc_positive[\"end_real\"].isin(df_arc_direct_tree[\"start_tree\"])\n            &amp; df_arc_positive[\"start_real\"].isin(df_arc_direct_tree[\"end_tree\"])\n        )\n    )\n    df_arc_positive_filtred = df_arc_positive[mask]\n    # Identify the outermost nodes in the current tree structure\n    last_blocks = set(\n        df_arc_direct_tree[\n            ~(df_arc_direct_tree[\"end_tree\"].isin(df_arc_direct_tree[\"start_tree\"]))\n        ][\"end_tree\"]\n    )\n    # Add the arcs that are connected to `df_arc_direct_tree`, following the tree\u2019s direction\n    mask = df_arc_positive_filtred[\"start_real\"].isin(last_blocks)\n    new_rows = df_arc_positive_filtred[mask].reset_index(drop=True)\n    new_rows = new_rows[[\"start_real\", \"end_real\"]]\n    new_rows = new_rows.rename(\n        columns={\"start_real\": \"start_tree\", \"end_real\": \"end_tree\"}\n    )\n    new_rows[\"value\"] = np.nan\n    df_arc_direct_tree = pd.concat([df_arc_direct_tree, new_rows], ignore_index=True)\n    # Add the arcs that are connected to `df_arc_direct_tree`, not following the tree\u2019s direction.\n    mask = df_arc_positive_filtred[\"end_real\"].isin(last_blocks)\n    new_rows = df_arc_positive_filtred[mask].reset_index(drop=True)\n    new_rows = new_rows[[\"start_real\", \"end_real\"]]\n    new_rows = new_rows.rename(\n        columns={\"start_real\": \"end_tree\", \"end_real\": \"start_tree\"}\n    )\n    new_rows[\"value\"] = np.nan\n    df_arc_direct_tree = pd.concat([df_arc_direct_tree, new_rows], ignore_index=True)\n\n    while True:\n        mask = ~(\n            (\n                df_arc_positive[\"start_real\"].isin(df_arc_direct_tree[\"start_tree\"])\n                &amp; df_arc_positive[\"end_real\"].isin(df_arc_direct_tree[\"end_tree\"])\n            )\n            | (\n                df_arc_positive[\"end_real\"].isin(df_arc_direct_tree[\"start_tree\"])\n                &amp; df_arc_positive[\"start_real\"].isin(df_arc_direct_tree[\"end_tree\"])\n            )\n        )\n        df_arc_positive_filtred = df_arc_positive[mask]\n        # Identify the outermost nodes in the current tree structure\n        last_blocks = set(\n            df_arc_direct_tree[\n                ~(df_arc_direct_tree[\"end_tree\"].isin(df_arc_direct_tree[\"start_tree\"]))\n                &amp; ~(df_arc_direct_tree[\"start_tree\"] == 0)\n            ][\"end_tree\"]\n        )\n\n        added_rows_counter = 0\n        # Add the arcs that are connected to `df_arc_direct_tree`, following the tree\u2019s direction\n        mask = df_arc_positive_filtred[\"start_real\"].isin(last_blocks)\n        new_rows = df_arc_positive_filtred[mask].reset_index(drop=True)\n        new_rows = new_rows[[\"start_real\", \"end_real\"]]\n        new_rows = new_rows.rename(\n            columns={\"start_real\": \"start_tree\", \"end_real\": \"end_tree\"}\n        )\n        new_rows[\"value\"] = np.nan\n        df_arc_direct_tree = pd.concat(\n            [df_arc_direct_tree, new_rows], ignore_index=True\n        )\n        added_rows_counter = added_rows_counter + len(new_rows)\n\n        # Add the arcs that are connected to `df_arc_direct_tree`, not following the tree\u2019s direction.\n        mask = df_arc_positive_filtred[\"end_real\"].isin(last_blocks)\n        new_rows = df_arc_positive_filtred[mask].reset_index(drop=True)\n        new_rows = new_rows[[\"start_real\", \"end_real\"]]\n        new_rows = new_rows.rename(\n            columns={\"start_real\": \"end_tree\", \"end_real\": \"start_tree\"}\n        )\n        new_rows[\"value\"] = np.nan\n        df_arc_direct_tree = pd.concat(\n            [df_arc_direct_tree, new_rows], ignore_index=True\n        )\n        added_rows_counter = added_rows_counter + len(new_rows)\n\n        if added_rows_counter == 0:\n            break\n    return df_arc_direct_tree\n</code></pre>"},{"location":"api/#py_lerchs_grossmann.build_df_arc_positive","title":"<code>build_df_arc_positive()</code>","text":"<p>Generates the Pandas DataFrame 'df_arc_positive' with the fields start_real, end_real, value, type and strength.</p> <p>The fields start_real, end_real and value are floats. The fields type and strength are strings.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A empty DataFrame containing the fields start_real, end_real, value, type and strength</p> Source code in <code>src/py_lerchs_grossmann/build_df.py</code> <pre><code>def build_df_arc_positive():\n    \"\"\"\n    Generates the Pandas DataFrame 'df_arc_positive' with the fields start_real, end_real, value, type and strength.\n\n    The fields start_real, end_real and value are floats. The fields type and strength are strings.\n\n    Returns\n    -------\n    pandas.DataFrame\n       A empty DataFrame containing the fields start_real, end_real, value, type and strength\n    \"\"\"\n    df_arc_positive = pd.DataFrame(\n        {\n            \"start_real\": pd.Series(dtype=\"float\"),\n            \"end_real\": pd.Series(dtype=\"float\"),\n            \"value\": pd.Series(dtype=\"float\"),\n            \"type\": pd.Series(dtype=\"string\"),\n            \"strength\": pd.Series(dtype=\"string\"),\n        }\n    )\n    return df_arc_positive\n</code></pre>"},{"location":"api/#py_lerchs_grossmann.build_df_x","title":"<code>build_df_x()</code>","text":"<p>Generates a Pandas DataFrame with the fields id, x, y and value, predefined with a single row of data.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A DataFrame containing one row with the following values: - <code>id</code>: 0 - <code>value</code>: 0</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; df_x = build_df_x()\n&gt;&gt;&gt; df_x\n    id  value\n0    0      0\n</code></pre> Source code in <code>src/py_lerchs_grossmann/build_df.py</code> <pre><code>def build_df_x():\n    \"\"\"\n    Generates a Pandas DataFrame with the fields id, x, y and value, predefined with a single row of data.\n\n    Returns\n    -------\n    pandas.DataFrame\n        A DataFrame containing one row with the following values:\n        - `id`: 0\n        - `value`: 0\n\n    Examples\n    --------\n        &gt;&gt;&gt; df_x = build_df_x()\n        &gt;&gt;&gt; df_x\n            id  value\n        0    0      0\n    \"\"\"\n\n    df_x = pd.DataFrame(\n        {\n            \"id\": [0],\n            \"value\": [0],\n        }\n    )\n    return df_x\n</code></pre>"},{"location":"api/#py_lerchs_grossmann.build_find_root","title":"<code>build_find_root(possible_arc, df_arc_positive, df_x)</code>","text":"<p>Find the root arc (i.e., the arc between X\u2080 and X\u2098).</p> <p>Parameters:</p> Name Type Description Default <code>possible_arc</code> <code>DataFrame</code> <p>DataFrame containing the arcs between nodes from <code>df_x</code> to <code>df_y</code>.</p> required <code>df_arc_positive</code> <code>DataFrame</code> <p>DataFrame containing the arcs selected by the Lerchs-Grossmann algorithm.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <code>A DataFrame with a single row representing the root arc of `possible_arc.loc[0]`.</code> Source code in <code>src/py_lerchs_grossmann/build_df.py</code> <pre><code>def build_find_root(\n    possible_arc: pd.DataFrame, df_arc_positive: pd.DataFrame, df_x: pd.DataFrame\n):\n    \"\"\"\n    Find the root arc (i.e., the arc between X\u2080 and X\u2098).\n\n    Parameters\n    ----------\n    possible_arc : pandas.DataFrame\n        DataFrame containing the arcs between nodes from `df_x` to `df_y`.\n    df_arc_positive : pandas.DataFrame\n        DataFrame containing the arcs selected by the Lerchs-Grossmann algorithm.\n\n    Returns\n    -------\n    pandas.DataFrame\n    A DataFrame with a single row representing the root arc of `possible_arc.loc[0]`.\n    \"\"\"\n    # Inicializa find_root con el primer arco\n    find_root = pd.DataFrame(\n        {\n            \"start_real\": [possible_arc.loc[0][\"start\"]],\n            \"end_real\": [possible_arc.loc[0][\"end\"]],\n        }\n    )\n    # Acumula todos los posibles arcos en una lista\n    root_rows = [find_root]\n    while True:\n        mask = (\n            (\n                df_arc_positive[\"start_real\"].isin(find_root[\"start_real\"])\n                | df_arc_positive[\"end_real\"].isin(find_root[\"start_real\"])\n                | df_arc_positive[\"start_real\"].isin(find_root[\"end_real\"])\n                | df_arc_positive[\"end_real\"].isin(find_root[\"end_real\"])\n            )\n            &amp; ~(\n                df_arc_positive[\"start_real\"].isin(find_root[\"start_real\"])\n                &amp; df_arc_positive[\"end_real\"].isin(find_root[\"end_real\"])\n            )\n            &amp; (\n                df_arc_positive[\"start_real\"].isin(df_x[\"id\"])\n                &amp; df_arc_positive[\"end_real\"].isin(df_x[\"id\"])\n            )\n        )\n        possible_root = df_arc_positive[mask].reset_index(drop=True)\n        if len(possible_root) == 0:\n            break\n        root_rows.append(possible_root)\n        find_root = pd.concat(root_rows, ignore_index=True)\n        find_root = find_root.drop_duplicates()\n        mask = (find_root[\"end_real\"].isin(df_x[\"id\"])) &amp; (find_root[\"start_real\"] == 0)\n        if len(find_root[mask]) &gt; 0:\n            break\n    mask = (find_root[\"start_real\"] == 0) &amp; (find_root[\"end_real\"].isin(df_x[\"id\"]))\n    find_root = find_root[mask].reset_index(drop=True)\n    return find_root\n</code></pre>"},{"location":"api/#py_lerchs_grossmann.classify_type_strength","title":"<code>classify_type_strength(df_arc_positive, df_arc_direct_tree)</code>","text":"<p>Compare <code>df_positive</code> and <code>df_arc_direct_tree</code> to classify the arcs in type (<code>p</code> or <code>m</code>) and the strength in (<code>strong</code> or <code>weak</code>)</p> <p>Parameters:</p> Name Type Description Default <code>df_arc_positive</code> <code>DataFrame</code> <p>DataFrame containing the arcs selected by the Lerchs-Grossmann algorithm.</p> required <code>df_arc_direct_tree</code> <code>DataFrame</code> <p>A DataFrame representing the rebuilt tree structure, ordered from root to outermost nodes.</p> required Source code in <code>src/py_lerchs_grossmann/build_df.py</code> <pre><code>def classify_type_strength(\n    df_arc_positive: pd.DataFrame, df_arc_direct_tree: pd.DataFrame\n):\n    \"\"\"\n    Compare `df_positive` and `df_arc_direct_tree` to classify the arcs in type (`p` or `m`) and the strength in (`strong` or `weak`)\n\n    Parameters\n    ----------\n    df_arc_positive : pandas.DataFrame\n        DataFrame containing the arcs selected by the Lerchs-Grossmann algorithm.\n    df_arc_direct_tree:\n        A DataFrame representing the rebuilt tree structure, ordered from root to outermost nodes.\n    \"\"\"\n    # Optimizaci\u00f3n: usar sets para comparaci\u00f3n r\u00e1pida\n    tree_pairs = set(\n        zip(df_arc_direct_tree[\"start_tree\"], df_arc_direct_tree[\"end_tree\"])\n    )\n    arc_pairs = list(zip(df_arc_positive[\"start_real\"], df_arc_positive[\"end_real\"]))\n    # Asignar tipo usando comprensi\u00f3n de listas y np.array\n    type_arr = np.array([\"p\" if pair in tree_pairs else \"m\" for pair in arc_pairs])\n    df_arc_positive[\"type\"] = type_arr\n    # Asignar strength vectorizado\n    value_arr = df_arc_positive[\"value\"].values.astype(float)\n    strength_arr = np.where(\n        (type_arr == \"p\") &amp; (value_arr &gt; 0),\n        \"strong\",\n        np.where(\n            (type_arr == \"p\") &amp; (value_arr &lt;= 0),\n            \"weak\",\n            np.where((type_arr == \"m\") &amp; (value_arr &gt; 0), \"weak\", \"strong\"),\n        ),\n    )\n    df_arc_positive[\"strength\"] = strength_arr\n</code></pre>"},{"location":"api/#py_lerchs_grossmann.filter_possible_arcs","title":"<code>filter_possible_arcs(df_arc, df_x, df_y)</code>","text":"<p>Create a copy of the DataFrame <code>df_arc</code>and filtered, keeping only the rows where <code>df_arc[start]</code> is in <code>df_x['id']</code> and <code>df_arc[end]</code> is in <code>df_y['id']</code>.</p> <p>Parameters:</p> Name Type Description Default <code>df_arc</code> <code>DataFrame</code> <p>DataFrame containing the arcs between the nodes.</p> required <code>df_x</code> <code>DataFrame</code> <p>DataFrame with the <code>id</code> column used to validate values in <code>start</code>.</p> required <code>df_y</code> <code>DataFrame</code> <p>DataFrame with the <code>id</code> column used to validate values in <code>end</code>.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Subset of <code>df_arc</code> where both <code>start</code> and <code>end</code> are valid.</p> Source code in <code>src/py_lerchs_grossmann/build_df.py</code> <pre><code>def filter_possible_arcs(df_arc: pd.DataFrame, df_x: pd.DataFrame, df_y: pd.DataFrame):\n    \"\"\"\n    Create a copy of the DataFrame `df_arc`and filtered, keeping only the rows where `df_arc[start]` is in `df_x['id']`\n    and `df_arc[end]` is in `df_y['id']`.\n\n    Parameters\n    ----------\n    df_arc : pandas.DataFrame\n        DataFrame containing the arcs between the nodes.\n    df_x : pandas.DataFrame\n        DataFrame with the `id` column used to validate values in `start`.\n    df_y : pandas.DataFrame\n        DataFrame with the `id` column used to validate values in `end`.\n\n    Returns\n    -------\n    pandas.DataFrame\n        Subset of `df_arc` where both `start` and `end` are valid.\n    \"\"\"\n    # we use sets for faster lookup in large dataframes\n    valid_starts = set(df_x[\"id\"])\n    valid_ends = set(df_y[\"id\"])\n\n    mask = df_arc[\"start\"].isin(valid_starts) &amp; df_arc[\"end\"].isin(valid_ends)\n\n    possible_arc = df_arc[mask].reset_index(drop=True)\n\n    return possible_arc\n</code></pre>"},{"location":"api/#py_lerchs_grossmann.main","title":"<code>main(df_block_model, df_arc, vervose=True, id='id', value='value')</code>","text":"<p>Main function that applies all steps of the Lerchs-Grossmann algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>df_arc</code> <code>DataFrame</code> <p>DataFrame containing the arcs between the blocks.</p> required <code>df_block_model</code> <code>DataFrame</code> <p>DataFrame containing the data of blocks that are part of the Block Model.</p> required Source code in <code>src/py_lerchs_grossmann/build_df.py</code> <pre><code>def main(\n    df_block_model: pd.DataFrame,\n    df_arc: pd.DataFrame,\n    vervose: bool = True,\n    id: str = \"id\",\n    value: str = \"value\",\n):\n    \"\"\"\n    Main function that applies all steps of the Lerchs-Grossmann algorithm.\n\n    Parameters\n    ----------\n    df_arc : pandas.DataFrame\n        DataFrame containing the arcs between the blocks.\n    df_block_model : pandas.DataFrame\n        DataFrame containing the data of blocks that are part of the Block Model.\n    \"\"\"\n    time_start = time.time()\n    mask = df_block_model[\"id\"].isin(df_arc[\"start\"]) | df_block_model[\"id\"].isin(\n        df_arc[\"end\"]\n    )\n    df_block_model = df_block_model[mask].reset_index(drop=True)\n    df = df_block_model[[id, value]].rename(columns={id: \"id\", value: \"value\"})\n    df[\"id\"] = df[\"id\"].astype(int)\n    df[\"value\"] = df[\"value\"].astype(float)\n\n    df_arc[\"start\"] = df_arc[\"start\"].astype(int)\n    df_arc[\"end\"] = df_arc[\"end\"].astype(int)\n\n    df_y = df[df[\"value\"] &lt; 0].copy()\n    print(f\"builded df_y time:{time.time()-time_start} seconds\")\n\n    df_x_0 = build_df_x()\n    df_x = pd.concat([df_x_0, df[df[\"value\"] &gt; 0].copy()], ignore_index=True)\n    print(f\"builded df_x time:{time.time()-time_start} seconds\")\n\n    print(f\"filtered df_y time:{time.time()-time_start} seconds\")\n    print(f\"Start for len:{len(df_y)}\")\n    # Create df_arc_positive directly\n    df_arc_positive = pd.DataFrame(\n        {\n            \"start_real\": 0,\n            \"end_real\": df[\"id\"],\n            \"value\": df[\"value\"],\n            \"type\": \"NaN\",\n            \"strength\": \"NaN\",\n        }\n    )\n    print(f\"builded df_arc_positive time:{time.time()-time_start} seconds\")\n\n    counter_cicle = 0\n\n    time_cicle = time.time()\n    while True:\n        # Find possible arcs between `df_x` and `df_y`.\n        possible_arc = filter_possible_arcs(df_arc, df_x, df_y)\n        if len(possible_arc) == 0:\n            print(\"\\nAlgoritm completed !!!\")\n            print(\"------------------------\")\n            print(\"df_arc_positive\")\n            print(df_arc_positive)\n            print(\"\\ndf_x\")\n            print(df_x)\n            print(\"\\ndf_y_copy\")\n            print(df_y)\n            break\n        counter_cicle += 1\n        if vervose:\n            print(\"\\n---------------\")\n        print(\n            f\"Counter cicle {counter_cicle} -&gt; time cicle {time.time()-time_cicle} seconds\"\n        )\n        if vervose:\n            print(\"---------------\")\n            print(\"possible_arc\")\n            print(possible_arc)\n            print(\"df_arc_positive\")\n            print(df_arc_positive)\n        time_cicle = time.time()\n        # Reset the columns `type` and `strength`\n        df_arc_positive[\"value\"] = np.nan\n        df_arc_positive[[\"type\", \"strength\"]] = \"NaN\"\n\n        # Find the root, the arc from X\u2080 to X\u2098\n        find_root = build_find_root(possible_arc, df_arc_positive, df_x)\n        if vervose:\n            print(\"\\nFind the root, the arc from X\u2080 to X\u2098\")\n            print(\"Root\")\n            print(find_root.loc[len(find_root) - 1])\n        # Remove the arc X\u2080 to X\u2098\n        mask = ~(\n            df_arc_positive[\"start_real\"].isin(find_root[\"start_real\"])\n            &amp; df_arc_positive[\"end_real\"].isin(find_root[\"end_real\"])\n        )\n        df_arc_positive = df_arc_positive[mask].reset_index(drop=True)\n        if vervose:\n            print(\"df_arc_positive\")\n            print(df_arc_positive)\n\n        # Add the first arc from `possible_arc` to `df_arc_positive` (i.e.,add the arc from X\u2097 to X\u2080)\n        new_row = pd.DataFrame(\n            {\n                \"start_real\": [possible_arc.loc[0][\"start\"]],\n                \"end_real\": [possible_arc.loc[0][\"end\"]],\n                \"value\": [np.nan],\n                \"type\": [np.nan],\n                \"strength\": [np.nan],\n            }\n        )\n        df_arc_positive = pd.concat([df_arc_positive, new_row], ignore_index=True)\n        if vervose:\n            print(\"\\nAdd the arc from X\u2096 to X\u2097\")\n            print(\"df_arc_positive\")\n            print(df_arc_positive)\n\n        # Create `df_arc_direct_tree`\n        df_arc_direct_tree = build_df_arc_direct_tree(df_arc_positive)\n        if vervose:\n            print(\"\\nCreate `df_arc_direct_tree`\")\n            print(\"df_arc_direct_tree\")\n            print(df_arc_direct_tree)\n\n        # Identify and filter the outermost nodes in `df_arc_direct_tree`\n        start_tree_set = set(df_arc_direct_tree[\"start_tree\"])\n        filtro = ~df_arc_direct_tree[\"end_tree\"].isin(start_tree_set)\n        # Optimizaci\u00f3n: asigna directamente usando .map sobre la columna filtrada\n        dict_y_id_value = dict(zip(df_block_model[\"id\"], df_block_model[\"value\"]))\n        df_arc_direct_tree.loc[filtro, \"value\"] = df_arc_direct_tree.loc[\n            filtro, \"end_tree\"\n        ].map(dict_y_id_value)\n        if vervose:\n            print(\"\\nAdd `value` of the outermost nodes in `df_arc_direct_tree`\")\n            print(\"df_arc_direct_tree\")\n            print(df_arc_direct_tree)\n\n        # Compute the values of the arcs at the middle and root of the tree based on the sum of the outermost arcs and the node values.\n        y_values = df_block_model.set_index(\"id\")[\"value\"].to_dict()\n        while df_arc_direct_tree[\"value\"].isna().any():\n            for i, row in df_arc_direct_tree[\n                df_arc_direct_tree[\"value\"].isna()\n            ].iterrows():\n                # Buscar hijos del nodo actual\n                children = df_arc_direct_tree[\n                    df_arc_direct_tree[\"start_tree\"] == row[\"end_tree\"]\n                ]\n\n                # Si alguno de los hijos tiene NaN, no se puede calcular a\u00fan\n                if children[\"value\"].isna().any():\n                    continue\n\n                # Sumar valores de los hijos\n                children_sum = children[\"value\"].sum()\n\n                # Buscar valor del nodo destino en df_block_model\n                node_value = y_values.get(row[\"end_tree\"], 0)\n\n                # Asignar el valor calculado\n                df_arc_direct_tree.at[i, \"value\"] = children_sum + node_value\n\n        if vervose:\n            print(\n                \"\\nCompute the values of the arcs at the middle and root of the tree based on the sum of the outermost arcs and the node values.\"\n            )\n            print(\"df_arc_direct_tree\")\n            print(df_arc_direct_tree)\n\n        # Add `values` from `df_arc_direct_tree` to `df_arc_positive`\n        Add_value_tree_to_positive(df_arc_positive, df_arc_direct_tree)\n        if vervose:\n            print(\"\\nAdd `values` from `df_arc_direct_tree` to `df_arc_positive`\")\n            print(\"df_arc_positive\")\n            print(df_arc_positive)\n\n        # Compare `df_positive` and `df_arc_direct_tree` to classify the arcs in type (`p` or `m`) and the strength in (`strong` or `weak`)\n        classify_type_strength(df_arc_positive, df_arc_direct_tree)\n        if vervose:\n            print(\n                \"\\nCompare `df_positive` and `df_arc_direct_tree` to classify the arcs in type (`p` or `m`) and the strength in (`strong` or `weak`)\"\n            )\n            print(\"df_arc_positive\")\n            print(df_arc_positive)\n\n        # If there is a `strong` arc and `start_real` is not 0, a new arc is added with `start_real` set to 0 and the same end_real. The original arc is removed.\n        while (\n            len(\n                df_arc_positive[\n                    (df_arc_positive[\"start_real\"] != 0)\n                    &amp; (df_arc_positive[\"strength\"] == \"strong\")\n                ]\n            )\n            &gt; 0\n        ):\n            cond_p_strong = (\n                (df_arc_positive[\"start_real\"] != 0)\n                &amp; (df_arc_positive[\"strength\"] == \"strong\")\n                &amp; (df_arc_positive[\"type\"] == \"p\")\n            )\n            df_arc_positive.loc[cond_p_strong, \"start_real\"] = 0\n\n            cond_m_strong = (\n                (df_arc_positive[\"start_real\"] != 0)\n                &amp; (df_arc_positive[\"strength\"] == \"strong\")\n                &amp; (df_arc_positive[\"type\"] == \"m\")\n            )\n            df_arc_positive.loc[cond_m_strong, \"end_real\"] = df_arc_positive.loc[\n                cond_m_strong, \"start_real\"\n            ]\n            df_arc_positive.loc[cond_m_strong, \"start_real\"] = 0\n\n            # Reset the columns `type` and `strength`\n            df_arc_positive[\"value\"] = np.nan\n            df_arc_positive[[\"type\", \"strength\"]] = \"NaN\"\n\n            # Create `df_arc_direct_tree`\n            df_arc_direct_tree = build_df_arc_direct_tree(df_arc_positive)\n\n            # Identify and filter the outermost nodes in `df_arc_direct_tree`\n            start_tree_set = set(df_arc_direct_tree[\"start_tree\"])\n            filtro = ~df_arc_direct_tree[\"end_tree\"].isin(start_tree_set)\n            # Optimizaci\u00f3n: asigna directamente usando .map sobre la columna filtrada\n            dict_y_id_value = dict(zip(df_block_model[\"id\"], df_block_model[\"value\"]))\n            df_arc_direct_tree.loc[filtro, \"value\"] = df_arc_direct_tree.loc[\n                filtro, \"end_tree\"\n            ].map(dict_y_id_value)\n            # Compute the values of the arcs at the middle and root of the tree based on the sum of the outermost arcs and the node values.\n            y_values = df_block_model.set_index(\"id\")[\"value\"].to_dict()\n            while df_arc_direct_tree[\"value\"].isna().any():\n                for i, row in df_arc_direct_tree[\n                    df_arc_direct_tree[\"value\"].isna()\n                ].iterrows():\n                    # Buscar hijos del nodo actual\n                    children = df_arc_direct_tree[\n                        df_arc_direct_tree[\"start_tree\"] == row[\"end_tree\"]\n                    ]\n\n                    # Si alguno de los hijos tiene NaN, no se puede calcular a\u00fan\n                    if children[\"value\"].isna().any():\n                        continue\n\n                    # Sumar valores de los hijos\n                    children_sum = children[\"value\"].sum()\n\n                    # Buscar valor del nodo destino en df_block_model\n                    node_value = y_values.get(row[\"end_tree\"], 0)\n\n                    # Asignar el valor calculado\n                    df_arc_direct_tree.at[i, \"value\"] = children_sum + node_value\n            Add_value_tree_to_positive(df_arc_positive, df_arc_direct_tree)\n            classify_type_strength(df_arc_positive, df_arc_direct_tree)\n            if vervose:\n                print(\n                    \"\\nIf there is a `strong` arc and `start_real` is not 0, a new arc is added with `start_real` set to 0 and the same end_real. The original arc is removed.\"\n                )\n                print(\"df_arc_positive\")\n                print(df_arc_positive)\n                print(\"df_x\")\n                print(df_x)\n                print(\"df_y\")\n                print(df_y)\n        mask = ~((df_arc_positive[\"start_real\"] == 0) &amp; (df_arc_positive[\"value\"] &lt;= 0))\n        df_arc_direct_tree_x = build_df_arc_direct_tree(df_arc_positive[mask])\n        # Optimizaci\u00f3n: usar sets para el filtro y evitar copia innecesaria\n        tree_ids = set(df_arc_direct_tree_x[\"start_tree\"]).union(\n            df_arc_direct_tree_x[\"end_tree\"]\n        )\n        mask = df[\"id\"].isin(tree_ids)\n        df_x = pd.concat([df_x_0, df[mask]], ignore_index=True)\n        if vervose:\n            print(\"df_x\")\n            print(df_x)\n        df_y = df[~mask].copy()\n        if vervose:\n            print(\"df_y\")\n            print(df_y)\n\n    mask = df_block_model[\"id\"].isin(df_x[\"id\"])\n    df_return = df_block_model[mask].reset_index(drop=True)\n    time_end = time.time()\n    print(f\"Runtime: {time_end - time_start:.4f} seconds\")\n\n    return df_return\n</code></pre>"},{"location":"Examples/Example1/","title":"Basic Example","text":"<p>This is a basic example of how to use the <code>py-lerchs-grossmann</code> package to obtain the optimum pit in a block model.</p>"},{"location":"Examples/Example1/#block-model","title":"Block Model","text":"<p>The block model must have the following columns: <code>id</code> and <code>value</code>, for the proper performance of the package. Other columns or extra data do not affect the performance of the package. In this example, the columns <code>x</code>, <code>y</code>, and <code>z</code> are not used by the algorithm.</p>"},{"location":"Examples/Example1/#example","title":"Example","text":"id x y z value 1 1 1 3 -1 2 2 1 3 -1 3 3 1 3 -1 4 4 1 3 -1 5 5 1 3 -1 6 2 1 2 -1 7 3 1 2 -1 8 4 1 2 3 9 3 1 1 5"},{"location":"Examples/Example1/#arc-dataframe","title":"Arc DataFrame","text":"<p>The Arc DataFrame is a table that contains the connections or arcs between the blocks. This is because, to mine a block, you must first mine the blocks above it.</p> <p></p> <p>Following the image, the Arc DataFrame should look like:</p> start end 6 1 6 2 6 3 7 2 7 3 7 4 8 3 8 4 8 5 9 6 9 7"},{"location":"Examples/Example1/#the-main-funtion","title":"The <code>main</code> funtion","text":"<p>Using the block model with the <code>id</code> and <code>value</code> columns, and the arc DataFrame, the <code>main</code> function executes the Lerchs-Grossmann algorithm.</p> <pre><code>import pandas as pd\nimport py_lerchs_grossmann as plg\n\n# Define block and arc data\ndf_y = pd.DataFrame(\n    {\n        \"id\": [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        \"x\": [1, 2, 3, 4, 5, 2, 3, 4, 3],\n        \"y\": [1, 1, 1, 1, 1, 1, 1, 1, 1],\n        \"z\": [3, 3, 3, 3, 3, 2, 2, 2, 1],\n        \"value\": [-1, -1, -1, -1, -1, -1, -1, 3, 5],\n    }\n)\n\ndf_arc = pd.DataFrame(\n    {\n        \"start\": [6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9],\n        \"end\": [1, 2, 3, 2, 3, 4, 3, 4, 5, 6, 7, 8],\n    }\n)\n\ndf_pit = main(df_y, df_arc, True)\n</code></pre> <p>If the argument <code>verbose=True</code>, the function will print each step of the algorithm in the terminal.</p> <pre><code>builded df_y_copy time:0.0 seconds\nbuilded df_x time:0.0010006427764892578 seconds\nbuilded df_arc_positive time:0.0022470951080322266 seconds\nbuilded mask time:0.0022470951080322266 seconds\nfiltered df_y_copy time:0.0022470951080322266 seconds\nStart for len:9\n\n---------------\nCounter cicle 1 -&gt; time cicle 0.0 seconds\n---------------\npossible_arc\n   start  end\n0      8    3\n1      8    4\n2      8    5\n3      9    6\n4      9    7\ndf_arc_positive\n   start_real  end_real  value  type  strength\n0           0         1     -1   NaN       NaN\n1           0         2     -1   NaN       NaN\n2           0         3     -1   NaN       NaN\n3           0         4     -1   NaN       NaN\n4           0         5     -1   NaN       NaN\n5           0         6     -1   NaN       NaN\n6           0         7     -1   NaN       NaN\n7           0         8      3   NaN       NaN\n8           0         9      5   NaN       NaN\n\nFind the root, the arc from X\u2080 to X\u2098\nRoot\nstart_real      0\nend_real        8\nvalue         NaN\ntype          NaN\nstrength      NaN\nName: 0, dtype: object\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1    NaN  NaN      NaN\n1           0         2    NaN  NaN      NaN\n2           0         3    NaN  NaN      NaN\n3           0         4    NaN  NaN      NaN\n4           0         5    NaN  NaN      NaN\n5           0         6    NaN  NaN      NaN\n6           0         7    NaN  NaN      NaN\n7           0         9    NaN  NaN      NaN\n\nAdd the arc from X\u2096 to X\u2097\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1    NaN  NaN      NaN\n1           0         2    NaN  NaN      NaN\n2           0         3    NaN  NaN      NaN\n3           0         4    NaN  NaN      NaN\n4           0         5    NaN  NaN      NaN\n5           0         6    NaN  NaN      NaN\n6           0         7    NaN  NaN      NaN\n7           0         9    NaN  NaN      NaN\n8           8         3    NaN  NaN      NaN\n\nCreate `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0    NaN\n1         0.0       2.0    NaN\n2         0.0       3.0    NaN\n3         0.0       4.0    NaN\n4         0.0       5.0    NaN\n5         0.0       6.0    NaN\n6         0.0       7.0    NaN\n7         0.0       9.0    NaN\n8         3.0       8.0    NaN\n\nAdd `value` of the outermost nodes in `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0   -1.0\n1         0.0       2.0   -1.0\n2         0.0       3.0    NaN\n3         0.0       4.0   -1.0\n4         0.0       5.0   -1.0\n5         0.0       6.0   -1.0\n6         0.0       7.0   -1.0\n7         0.0       9.0    5.0\n8         3.0       8.0    3.0\n\nCompute the values of the arcs at the middle and root of the tree based on the sum of the outermost arcs and the node values.\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0   -1.0\n1         0.0       2.0   -1.0\n2         0.0       3.0    2.0\n3         0.0       4.0   -1.0\n4         0.0       5.0   -1.0\n5         0.0       6.0   -1.0\n6         0.0       7.0   -1.0\n7         0.0       9.0    5.0\n8         3.0       8.0    3.0\n\nAdd `values` from `df_arc_direct_tree` to `df_arc_positive`\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1   -1.0  NaN      NaN\n1           0         2   -1.0  NaN      NaN\n2           0         3    2.0  NaN      NaN\n3           0         4   -1.0  NaN      NaN\n4           0         5   -1.0  NaN      NaN\n5           0         6   -1.0  NaN      NaN\n6           0         7   -1.0  NaN      NaN\n7           0         9    5.0  NaN      NaN\n8           8         3    3.0  NaN      NaN\n\nCompare `df_positive` and `df_arc_direct_tree` to classify the arcs in type (`p` or `m`) and the strength in (`strong` or `weak`)\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1   -1.0    p     weak\n1           0         2   -1.0    p     weak\n2           0         3    2.0    p   strong\n3           0         4   -1.0    p     weak\n4           0         5   -1.0    p     weak\n5           0         6   -1.0    p     weak\n6           0         7   -1.0    p     weak\n7           0         9    5.0    p   strong\n8           8         3    3.0    m     weak\ndf_x\n   id    x    y    z  value\n0   0  NaN  NaN  NaN      0\n1   3  3.0  1.0  3.0     -1\n2   8  4.0  1.0  2.0      3\n3   9  3.0  1.0  1.0      5\ndf_y_copy\n   id  x  y  z  value\n0   1  1  1  3     -1\n1   2  2  1  3     -1\n3   4  4  1  3     -1\n4   5  5  1  3     -1\n5   6  2  1  2     -1\n6   7  3  1  2     -1\n\n---------------\nCounter cicle 2 -&gt; time cicle 0.06424283981323242 seconds\n---------------\npossible_arc\n   start  end\n0      8    4\n1      8    5\n2      9    6\n3      9    7\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1   -1.0    p     weak\n1           0         2   -1.0    p     weak\n2           0         3    2.0    p   strong\n3           0         4   -1.0    p     weak\n4           0         5   -1.0    p     weak\n5           0         6   -1.0    p     weak\n6           0         7   -1.0    p     weak\n7           0         9    5.0    p   strong\n8           8         3    3.0    m     weak\n\nFind the root, the arc from X\u2080 to X\u2098\nRoot\nstart_real      0\nend_real        3\nvalue         NaN\ntype          NaN\nstrength      NaN\nName: 0, dtype: object\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1    NaN  NaN      NaN\n1           0         2    NaN  NaN      NaN\n2           0         4    NaN  NaN      NaN\n3           0         5    NaN  NaN      NaN\n4           0         6    NaN  NaN      NaN\n5           0         7    NaN  NaN      NaN\n6           0         9    NaN  NaN      NaN\n7           8         3    NaN  NaN      NaN\n\nAdd the arc from X\u2096 to X\u2097\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1    NaN  NaN      NaN\n1           0         2    NaN  NaN      NaN\n2           0         4    NaN  NaN      NaN\n3           0         5    NaN  NaN      NaN\n4           0         6    NaN  NaN      NaN\n5           0         7    NaN  NaN      NaN\n6           0         9    NaN  NaN      NaN\n7           8         3    NaN  NaN      NaN\n8           8         4    NaN  NaN      NaN\n\nCreate `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0    NaN\n1         0.0       2.0    NaN\n2         0.0       4.0    NaN\n3         0.0       5.0    NaN\n4         0.0       6.0    NaN\n5         0.0       7.0    NaN\n6         0.0       9.0    NaN\n7         4.0       8.0    NaN\n8         8.0       3.0    NaN\n\nAdd `value` of the outermost nodes in `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0   -1.0\n1         0.0       2.0   -1.0\n2         0.0       4.0    NaN\n3         0.0       5.0   -1.0\n4         0.0       6.0   -1.0\n5         0.0       7.0   -1.0\n6         0.0       9.0    5.0\n7         4.0       8.0    NaN\n8         8.0       3.0   -1.0\n\nCompute the values of the arcs at the middle and root of the tree based on the sum of the outermost arcs and the node values.\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0   -1.0\n1         0.0       2.0   -1.0\n2         0.0       4.0    1.0\n3         0.0       5.0   -1.0\n4         0.0       6.0   -1.0\n5         0.0       7.0   -1.0\n6         0.0       9.0    5.0\n7         4.0       8.0    2.0\n8         8.0       3.0   -1.0\n\nAdd `values` from `df_arc_direct_tree` to `df_arc_positive`\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1   -1.0  NaN      NaN\n1           0         2   -1.0  NaN      NaN\n2           0         4    1.0  NaN      NaN\n3           0         5   -1.0  NaN      NaN\n4           0         6   -1.0  NaN      NaN\n5           0         7   -1.0  NaN      NaN\n6           0         9    5.0  NaN      NaN\n7           8         3   -1.0  NaN      NaN\n8           8         4    2.0  NaN      NaN\n\nCompare `df_positive` and `df_arc_direct_tree` to classify the arcs in type (`p` or `m`) and the strength in (`strong` or `weak`)\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1   -1.0    p     weak\n1           0         2   -1.0    p     weak\n2           0         4    1.0    p   strong\n3           0         5   -1.0    p     weak\n4           0         6   -1.0    p     weak\n5           0         7   -1.0    p     weak\n6           0         9    5.0    p   strong\n7           8         3   -1.0    p     weak\n8           8         4    2.0    m     weak\ndf_x\n   id    x    y    z  value\n0   0  NaN  NaN  NaN      0\n1   3  3.0  1.0  3.0     -1\n2   4  4.0  1.0  3.0     -1\n3   8  4.0  1.0  2.0      3\n4   9  3.0  1.0  1.0      5\ndf_y_copy\n   id  x  y  z  value\n0   1  1  1  3     -1\n1   2  2  1  3     -1\n4   5  5  1  3     -1\n5   6  2  1  2     -1\n6   7  3  1  2     -1\n\n---------------\nCounter cicle 3 -&gt; time cicle 0.07159423828125 seconds\n---------------\npossible_arc\n   start  end\n0      8    5\n1      9    6\n2      9    7\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1   -1.0    p     weak\n1           0         2   -1.0    p     weak\n2           0         4    1.0    p   strong\n3           0         5   -1.0    p     weak\n4           0         6   -1.0    p     weak\n5           0         7   -1.0    p     weak\n6           0         9    5.0    p   strong\n7           8         3   -1.0    p     weak\n8           8         4    2.0    m     weak\n\nFind the root, the arc from X\u2080 to X\u2098\nRoot\nstart_real      0\nend_real        4\nvalue         NaN\ntype          NaN\nstrength      NaN\nName: 0, dtype: object\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1    NaN  NaN      NaN\n1           0         2    NaN  NaN      NaN\n2           0         5    NaN  NaN      NaN\n3           0         6    NaN  NaN      NaN\n4           0         7    NaN  NaN      NaN\n5           0         9    NaN  NaN      NaN\n6           8         3    NaN  NaN      NaN\n7           8         4    NaN  NaN      NaN\n\nAdd the arc from X\u2096 to X\u2097\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1    NaN  NaN      NaN\n1           0         2    NaN  NaN      NaN\n2           0         5    NaN  NaN      NaN\n3           0         6    NaN  NaN      NaN\n4           0         7    NaN  NaN      NaN\n5           0         9    NaN  NaN      NaN\n6           8         3    NaN  NaN      NaN\n7           8         4    NaN  NaN      NaN\n8           8         5    NaN  NaN      NaN\n\nCreate `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0    NaN\n1         0.0       2.0    NaN\n2         0.0       5.0    NaN\n3         0.0       6.0    NaN\n4         0.0       7.0    NaN\n5         0.0       9.0    NaN\n6         5.0       8.0    NaN\n7         8.0       3.0    NaN\n8         8.0       4.0    NaN\n\nAdd `value` of the outermost nodes in `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0   -1.0\n1         0.0       2.0   -1.0\n2         0.0       5.0    NaN\n3         0.0       6.0   -1.0\n4         0.0       7.0   -1.0\n5         0.0       9.0    5.0\n6         5.0       8.0    NaN\n7         8.0       3.0   -1.0\n8         8.0       4.0   -1.0\n\nCompute the values of the arcs at the middle and root of the tree based on the sum of the outermost arcs and the node values.\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0   -1.0\n1         0.0       2.0   -1.0\n2         0.0       5.0    0.0\n3         0.0       6.0   -1.0\n4         0.0       7.0   -1.0\n5         0.0       9.0    5.0\n6         5.0       8.0    1.0\n7         8.0       3.0   -1.0\n8         8.0       4.0   -1.0\n\nAdd `values` from `df_arc_direct_tree` to `df_arc_positive`\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1   -1.0  NaN      NaN\n1           0         2   -1.0  NaN      NaN\n2           0         5    0.0  NaN      NaN\n3           0         6   -1.0  NaN      NaN\n4           0         7   -1.0  NaN      NaN\n5           0         9    5.0  NaN      NaN\n6           8         3   -1.0  NaN      NaN\n7           8         4   -1.0  NaN      NaN\n8           8         5    1.0  NaN      NaN\n\nCompare `df_positive` and `df_arc_direct_tree` to classify the arcs in type (`p` or `m`) and the strength in (`strong` or `weak`)\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1   -1.0    p     weak\n1           0         2   -1.0    p     weak\n2           0         5    0.0    p     weak\n3           0         6   -1.0    p     weak\n4           0         7   -1.0    p     weak\n5           0         9    5.0    p   strong\n6           8         3   -1.0    p     weak\n7           8         4   -1.0    p     weak\n8           8         5    1.0    m     weak\ndf_x\n   id    x    y    z  value\n0   0  NaN  NaN  NaN      0\n1   9  3.0  1.0  1.0      5\ndf_y_copy\n   id  x  y  z  value\n0   1  1  1  3     -1\n1   2  2  1  3     -1\n2   3  3  1  3     -1\n3   4  4  1  3     -1\n4   5  5  1  3     -1\n5   6  2  1  2     -1\n6   7  3  1  2     -1\n7   8  4  1  2      3\n\n---------------\nCounter cicle 4 -&gt; time cicle 0.07389569282531738 seconds\n---------------\npossible_arc\n   start  end\n0      9    6\n1      9    7\n2      9    8\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1   -1.0    p     weak\n1           0         2   -1.0    p     weak\n2           0         5    0.0    p     weak\n3           0         6   -1.0    p     weak\n4           0         7   -1.0    p     weak\n5           0         9    5.0    p   strong\n6           8         3   -1.0    p     weak\n7           8         4   -1.0    p     weak\n8           8         5    1.0    m     weak\n\nFind the root, the arc from X\u2080 to X\u2098\nRoot\nstart_real      0\nend_real        9\nvalue         NaN\ntype          NaN\nstrength      NaN\nName: 0, dtype: object\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1    NaN  NaN      NaN\n1           0         2    NaN  NaN      NaN\n2           0         5    NaN  NaN      NaN\n3           0         6    NaN  NaN      NaN\n4           0         7    NaN  NaN      NaN\n5           8         3    NaN  NaN      NaN\n6           8         4    NaN  NaN      NaN\n7           8         5    NaN  NaN      NaN\n\nAdd the arc from X\u2096 to X\u2097\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1    NaN  NaN      NaN\n1           0         2    NaN  NaN      NaN\n2           0         5    NaN  NaN      NaN\n3           0         6    NaN  NaN      NaN\n4           0         7    NaN  NaN      NaN\n5           8         3    NaN  NaN      NaN\n6           8         4    NaN  NaN      NaN\n7           8         5    NaN  NaN      NaN\n8           9         6    NaN  NaN      NaN\n\nCreate `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0    NaN\n1         0.0       2.0    NaN\n2         0.0       5.0    NaN\n3         0.0       6.0    NaN\n4         0.0       7.0    NaN\n5         5.0       8.0    NaN\n6         6.0       9.0    NaN\n7         8.0       3.0    NaN\n8         8.0       4.0    NaN\n\nAdd `value` of the outermost nodes in `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0   -1.0\n1         0.0       2.0   -1.0\n2         0.0       5.0    NaN\n3         0.0       6.0    NaN\n4         0.0       7.0   -1.0\n5         5.0       8.0    NaN\n6         6.0       9.0    5.0\n7         8.0       3.0   -1.0\n8         8.0       4.0   -1.0\n\nCompute the values of the arcs at the middle and root of the tree based on the sum of the outermost arcs and the node values.\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0   -1.0\n1         0.0       2.0   -1.0\n2         0.0       5.0    0.0\n3         0.0       6.0    4.0\n4         0.0       7.0   -1.0\n5         5.0       8.0    1.0\n6         6.0       9.0    5.0\n7         8.0       3.0   -1.0\n8         8.0       4.0   -1.0\n\nAdd `values` from `df_arc_direct_tree` to `df_arc_positive`\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1   -1.0  NaN      NaN\n1           0         2   -1.0  NaN      NaN\n2           0         5    0.0  NaN      NaN\n3           0         6    4.0  NaN      NaN\n4           0         7   -1.0  NaN      NaN\n5           8         3   -1.0  NaN      NaN\n6           8         4   -1.0  NaN      NaN\n7           8         5    1.0  NaN      NaN\n8           9         6    5.0  NaN      NaN\n\nCompare `df_positive` and `df_arc_direct_tree` to classify the arcs in type (`p` or `m`) and the strength in (`strong` or `weak`)\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1   -1.0    p     weak\n1           0         2   -1.0    p     weak\n2           0         5    0.0    p     weak\n3           0         6    4.0    p   strong\n4           0         7   -1.0    p     weak\n5           8         3   -1.0    p     weak\n6           8         4   -1.0    p     weak\n7           8         5    1.0    m     weak\n8           9         6    5.0    m     weak\ndf_x\n   id    x    y    z  value\n0   0  NaN  NaN  NaN      0\n1   6  2.0  1.0  2.0     -1\n2   9  3.0  1.0  1.0      5\ndf_y_copy\n   id  x  y  z  value\n0   1  1  1  3     -1\n1   2  2  1  3     -1\n2   3  3  1  3     -1\n3   4  4  1  3     -1\n4   5  5  1  3     -1\n6   7  3  1  2     -1\n7   8  4  1  2      3\n\n---------------\nCounter cicle 5 -&gt; time cicle 0.06777811050415039 seconds\n---------------\npossible_arc\n   start  end\n0      6    1\n1      6    2\n2      6    3\n3      9    7\n4      9    8\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1   -1.0    p     weak\n1           0         2   -1.0    p     weak\n2           0         5    0.0    p     weak\n3           0         6    4.0    p   strong\n4           0         7   -1.0    p     weak\n5           8         3   -1.0    p     weak\n6           8         4   -1.0    p     weak\n7           8         5    1.0    m     weak\n8           9         6    5.0    m     weak\n\nFind the root, the arc from X\u2080 to X\u2098\nRoot\nstart_real      0\nend_real        6\nvalue         NaN\ntype          NaN\nstrength      NaN\nName: 0, dtype: object\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1    NaN  NaN      NaN\n1           0         2    NaN  NaN      NaN\n2           0         5    NaN  NaN      NaN\n3           0         7    NaN  NaN      NaN\n4           8         3    NaN  NaN      NaN\n5           8         4    NaN  NaN      NaN\n6           8         5    NaN  NaN      NaN\n7           9         6    NaN  NaN      NaN\n\nAdd the arc from X\u2096 to X\u2097\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1    NaN  NaN      NaN\n1           0         2    NaN  NaN      NaN\n2           0         5    NaN  NaN      NaN\n3           0         7    NaN  NaN      NaN\n4           8         3    NaN  NaN      NaN\n5           8         4    NaN  NaN      NaN\n6           8         5    NaN  NaN      NaN\n7           9         6    NaN  NaN      NaN\n8           6         1    NaN  NaN      NaN\n\nCreate `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0    NaN\n1         0.0       2.0    NaN\n2         0.0       5.0    NaN\n3         0.0       7.0    NaN\n4         5.0       8.0    NaN\n5         1.0       6.0    NaN\n6         8.0       3.0    NaN\n7         8.0       4.0    NaN\n8         6.0       9.0    NaN\n\nAdd `value` of the outermost nodes in `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0    NaN\n1         0.0       2.0   -1.0\n2         0.0       5.0    NaN\n3         0.0       7.0   -1.0\n4         5.0       8.0    NaN\n5         1.0       6.0    NaN\n6         8.0       3.0   -1.0\n7         8.0       4.0   -1.0\n8         6.0       9.0    5.0\n\nCompute the values of the arcs at the middle and root of the tree based on the sum of the outermost arcs and the node values.\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       1.0    3.0\n1         0.0       2.0   -1.0\n2         0.0       5.0    0.0\n3         0.0       7.0   -1.0\n4         5.0       8.0    1.0\n5         1.0       6.0    4.0\n6         8.0       3.0   -1.0\n7         8.0       4.0   -1.0\n8         6.0       9.0    5.0\n\nAdd `values` from `df_arc_direct_tree` to `df_arc_positive`\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1    3.0  NaN      NaN\n1           0         2   -1.0  NaN      NaN\n2           0         5    0.0  NaN      NaN\n3           0         7   -1.0  NaN      NaN\n4           8         3   -1.0  NaN      NaN\n5           8         4   -1.0  NaN      NaN\n6           8         5    1.0  NaN      NaN\n7           9         6    5.0  NaN      NaN\n8           6         1    4.0  NaN      NaN\n\nCompare `df_positive` and `df_arc_direct_tree` to classify the arcs in type (`p` or `m`) and the strength in (`strong` or `weak`)\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1    3.0    p   strong\n1           0         2   -1.0    p     weak\n2           0         5    0.0    p     weak\n3           0         7   -1.0    p     weak\n4           8         3   -1.0    p     weak\n5           8         4   -1.0    p     weak\n6           8         5    1.0    m     weak\n7           9         6    5.0    m     weak\n8           6         1    4.0    m     weak\ndf_x\n   id    x    y    z  value\n0   0  NaN  NaN  NaN      0\n1   1  1.0  1.0  3.0     -1\n2   6  2.0  1.0  2.0     -1\n3   9  3.0  1.0  1.0      5\ndf_y_copy\n   id  x  y  z  value\n1   2  2  1  3     -1\n2   3  3  1  3     -1\n3   4  4  1  3     -1\n4   5  5  1  3     -1\n6   7  3  1  2     -1\n7   8  4  1  2      3\n\n---------------\nCounter cicle 6 -&gt; time cicle 0.06540465354919434 seconds\n---------------\npossible_arc\n   start  end\n0      6    2\n1      6    3\n2      9    7\n3      9    8\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         1    3.0    p   strong\n1           0         2   -1.0    p     weak\n2           0         5    0.0    p     weak\n3           0         7   -1.0    p     weak\n4           8         3   -1.0    p     weak\n5           8         4   -1.0    p     weak\n6           8         5    1.0    m     weak\n7           9         6    5.0    m     weak\n8           6         1    4.0    m     weak\n\nFind the root, the arc from X\u2080 to X\u2098\nRoot\nstart_real      0\nend_real        1\nvalue         NaN\ntype          NaN\nstrength      NaN\nName: 0, dtype: object\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         2    NaN  NaN      NaN\n1           0         5    NaN  NaN      NaN\n2           0         7    NaN  NaN      NaN\n3           8         3    NaN  NaN      NaN\n4           8         4    NaN  NaN      NaN\n5           8         5    NaN  NaN      NaN\n6           9         6    NaN  NaN      NaN\n7           6         1    NaN  NaN      NaN\n\nAdd the arc from X\u2096 to X\u2097\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         2    NaN  NaN      NaN\n1           0         5    NaN  NaN      NaN\n2           0         7    NaN  NaN      NaN\n3           8         3    NaN  NaN      NaN\n4           8         4    NaN  NaN      NaN\n5           8         5    NaN  NaN      NaN\n6           9         6    NaN  NaN      NaN\n7           6         1    NaN  NaN      NaN\n8           6         2    NaN  NaN      NaN\n\nCreate `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       2.0    NaN\n1         0.0       5.0    NaN\n2         0.0       7.0    NaN\n3         5.0       8.0    NaN\n4         2.0       6.0    NaN\n5         8.0       3.0    NaN\n6         8.0       4.0    NaN\n7         6.0       1.0    NaN\n8         6.0       9.0    NaN\n\nAdd `value` of the outermost nodes in `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       2.0    NaN\n1         0.0       5.0    NaN\n2         0.0       7.0   -1.0\n3         5.0       8.0    NaN\n4         2.0       6.0    NaN\n5         8.0       3.0   -1.0\n6         8.0       4.0   -1.0\n7         6.0       1.0   -1.0\n8         6.0       9.0    5.0\n\nCompute the values of the arcs at the middle and root of the tree based on the sum of the outermost arcs and the node values.\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       2.0    2.0\n1         0.0       5.0    0.0\n2         0.0       7.0   -1.0\n3         5.0       8.0    1.0\n4         2.0       6.0    3.0\n5         8.0       3.0   -1.0\n6         8.0       4.0   -1.0\n7         6.0       1.0   -1.0\n8         6.0       9.0    5.0\n\nAdd `values` from `df_arc_direct_tree` to `df_arc_positive`\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         2    2.0  NaN      NaN\n1           0         5    0.0  NaN      NaN\n2           0         7   -1.0  NaN      NaN\n3           8         3   -1.0  NaN      NaN\n4           8         4   -1.0  NaN      NaN\n5           8         5    1.0  NaN      NaN\n6           9         6    5.0  NaN      NaN\n7           6         1   -1.0  NaN      NaN\n8           6         2    3.0  NaN      NaN\n\nCompare `df_positive` and `df_arc_direct_tree` to classify the arcs in type (`p` or `m`) and the strength in (`strong` or `weak`)\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         2    2.0    p   strong\n1           0         5    0.0    p     weak\n2           0         7   -1.0    p     weak\n3           8         3   -1.0    p     weak\n4           8         4   -1.0    p     weak\n5           8         5    1.0    m     weak\n6           9         6    5.0    m     weak\n7           6         1   -1.0    p     weak\n8           6         2    3.0    m     weak\ndf_x\n   id    x    y    z  value\n0   0  NaN  NaN  NaN      0\n1   1  1.0  1.0  3.0     -1\n2   2  2.0  1.0  3.0     -1\n3   6  2.0  1.0  2.0     -1\n4   9  3.0  1.0  1.0      5\ndf_y_copy\n   id  x  y  z  value\n2   3  3  1  3     -1\n3   4  4  1  3     -1\n4   5  5  1  3     -1\n6   7  3  1  2     -1\n7   8  4  1  2      3\n\n---------------\nCounter cicle 7 -&gt; time cicle 0.07021951675415039 seconds\n---------------\npossible_arc\n   start  end\n0      6    3\n1      9    7\n2      9    8\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         2    2.0    p   strong\n1           0         5    0.0    p     weak\n2           0         7   -1.0    p     weak\n3           8         3   -1.0    p     weak\n4           8         4   -1.0    p     weak\n5           8         5    1.0    m     weak\n6           9         6    5.0    m     weak\n7           6         1   -1.0    p     weak\n8           6         2    3.0    m     weak\n\nFind the root, the arc from X\u2080 to X\u2098\nRoot\nstart_real      0\nend_real        2\nvalue         NaN\ntype          NaN\nstrength      NaN\nName: 0, dtype: object\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         5    NaN  NaN      NaN\n1           0         7    NaN  NaN      NaN\n2           8         3    NaN  NaN      NaN\n3           8         4    NaN  NaN      NaN\n4           8         5    NaN  NaN      NaN\n5           9         6    NaN  NaN      NaN\n6           6         1    NaN  NaN      NaN\n7           6         2    NaN  NaN      NaN\n\nAdd the arc from X\u2096 to X\u2097\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         5    NaN  NaN      NaN\n1           0         7    NaN  NaN      NaN\n2           8         3    NaN  NaN      NaN\n3           8         4    NaN  NaN      NaN\n4           8         5    NaN  NaN      NaN\n5           9         6    NaN  NaN      NaN\n6           6         1    NaN  NaN      NaN\n7           6         2    NaN  NaN      NaN\n8           6         3    NaN  NaN      NaN\n\nCreate `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       5.0    NaN\n1         0.0       7.0    NaN\n2         5.0       8.0    NaN\n3         8.0       3.0    NaN\n4         8.0       4.0    NaN\n5         3.0       6.0    NaN\n6         6.0       1.0    NaN\n7         6.0       2.0    NaN\n8         6.0       9.0    NaN\n\nAdd `value` of the outermost nodes in `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       5.0    NaN\n1         0.0       7.0   -1.0\n2         5.0       8.0    NaN\n3         8.0       3.0    NaN\n4         8.0       4.0   -1.0\n5         3.0       6.0    NaN\n6         6.0       1.0   -1.0\n7         6.0       2.0   -1.0\n8         6.0       9.0    5.0\n\nCompute the values of the arcs at the middle and root of the tree based on the sum of the outermost arcs and the node values.\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       5.0    2.0\n1         0.0       7.0   -1.0\n2         5.0       8.0    3.0\n3         8.0       3.0    1.0\n4         8.0       4.0   -1.0\n5         3.0       6.0    2.0\n6         6.0       1.0   -1.0\n7         6.0       2.0   -1.0\n8         6.0       9.0    5.0\n\nAdd `values` from `df_arc_direct_tree` to `df_arc_positive`\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         5    2.0  NaN      NaN\n1           0         7   -1.0  NaN      NaN\n2           8         3    1.0  NaN      NaN\n3           8         4   -1.0  NaN      NaN\n4           8         5    3.0  NaN      NaN\n5           9         6    5.0  NaN      NaN\n6           6         1   -1.0  NaN      NaN\n7           6         2   -1.0  NaN      NaN\n8           6         3    2.0  NaN      NaN\n\nCompare `df_positive` and `df_arc_direct_tree` to classify the arcs in type (`p` or `m`) and the strength in (`strong` or `weak`)\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         5    2.0    p   strong\n1           0         7   -1.0    p     weak\n2           8         3    1.0    p   strong\n3           8         4   -1.0    p     weak\n4           8         5    3.0    m     weak\n5           9         6    5.0    m     weak\n6           6         1   -1.0    p     weak\n7           6         2   -1.0    p     weak\n8           6         3    2.0    m     weak\n\nIf there is a `strong` arc and `start_real` is not 0, a new arc is added with `start_real` set to 0 and the same end_real. The original arc is removed.\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         5    1.0    p   strong\n1           0         7   -1.0    p     weak\n2           0         3    1.0    p   strong\n3           8         4   -1.0    p     weak\n4           8         5    2.0    m     weak\n5           9         6    5.0    m     weak\n6           6         1   -1.0    p     weak\n7           6         2   -1.0    p     weak\n8           6         3    2.0    m     weak\ndf_x\n   id    x    y    z  value\n0   0  NaN  NaN  NaN      0\n1   1  1.0  1.0  3.0     -1\n2   2  2.0  1.0  3.0     -1\n3   6  2.0  1.0  2.0     -1\n4   9  3.0  1.0  1.0      5\ndf_y_copy\n   id  x  y  z  value\n2   3  3  1  3     -1\n3   4  4  1  3     -1\n4   5  5  1  3     -1\n6   7  3  1  2     -1\n7   8  4  1  2      3\ndf_x\n   id    x    y    z  value\n0   0  NaN  NaN  NaN      0\n1   1  1.0  1.0  3.0     -1\n2   2  2.0  1.0  3.0     -1\n3   3  3.0  1.0  3.0     -1\n4   4  4.0  1.0  3.0     -1\n5   5  5.0  1.0  3.0     -1\n6   6  2.0  1.0  2.0     -1\n7   8  4.0  1.0  2.0      3\n8   9  3.0  1.0  1.0      5\ndf_y_copy\n   id  x  y  z  value\n6   7  3  1  2     -1\n\n---------------\nCounter cicle 8 -&gt; time cicle 0.10406661033630371 seconds\n---------------\npossible_arc\n   start  end\n0      9    7\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         5    1.0    p   strong\n1           0         7   -1.0    p     weak\n2           0         3    1.0    p   strong\n3           8         4   -1.0    p     weak\n4           8         5    2.0    m     weak\n5           9         6    5.0    m     weak\n6           6         1   -1.0    p     weak\n7           6         2   -1.0    p     weak\n8           6         3    2.0    m     weak\n\nFind the root, the arc from X\u2080 to X\u2098\nRoot\nstart_real      0\nend_real        3\nvalue         NaN\ntype          NaN\nstrength      NaN\nName: 0, dtype: object\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         5    NaN  NaN      NaN\n1           0         7    NaN  NaN      NaN\n2           8         4    NaN  NaN      NaN\n3           8         5    NaN  NaN      NaN\n4           9         6    NaN  NaN      NaN\n5           6         1    NaN  NaN      NaN\n6           6         2    NaN  NaN      NaN\n7           6         3    NaN  NaN      NaN\n\nAdd the arc from X\u2096 to X\u2097\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         5    NaN  NaN      NaN\n1           0         7    NaN  NaN      NaN\n2           8         4    NaN  NaN      NaN\n3           8         5    NaN  NaN      NaN\n4           9         6    NaN  NaN      NaN\n5           6         1    NaN  NaN      NaN\n6           6         2    NaN  NaN      NaN\n7           6         3    NaN  NaN      NaN\n8           9         7    NaN  NaN      NaN\n\nCreate `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       5.0    NaN\n1         0.0       7.0    NaN\n2         5.0       8.0    NaN\n3         7.0       9.0    NaN\n4         8.0       4.0    NaN\n5         9.0       6.0    NaN\n6         6.0       1.0    NaN\n7         6.0       2.0    NaN\n8         6.0       3.0    NaN\n\nAdd `value` of the outermost nodes in `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       5.0    NaN\n1         0.0       7.0    NaN\n2         5.0       8.0    NaN\n3         7.0       9.0    NaN\n4         8.0       4.0   -1.0\n5         9.0       6.0    NaN\n6         6.0       1.0   -1.0\n7         6.0       2.0   -1.0\n8         6.0       3.0   -1.0\n\nCompute the values of the arcs at the middle and root of the tree based on the sum of the outermost arcs and the node values.\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       5.0    1.0\n1         0.0       7.0    0.0\n2         5.0       8.0    2.0\n3         7.0       9.0    1.0\n4         8.0       4.0   -1.0\n5         9.0       6.0   -4.0\n6         6.0       1.0   -1.0\n7         6.0       2.0   -1.0\n8         6.0       3.0   -1.0\n\nAdd `values` from `df_arc_direct_tree` to `df_arc_positive`\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         5    1.0  NaN      NaN\n1           0         7    0.0  NaN      NaN\n2           8         4   -1.0  NaN      NaN\n3           8         5    2.0  NaN      NaN\n4           9         6   -4.0  NaN      NaN\n5           6         1   -1.0  NaN      NaN\n6           6         2   -1.0  NaN      NaN\n7           6         3   -1.0  NaN      NaN\n8           9         7    1.0  NaN      NaN\n\nCompare `df_positive` and `df_arc_direct_tree` to classify the arcs in type (`p` or `m`) and the strength in (`strong` or `weak`)\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         5    1.0    p   strong\n1           0         7    0.0    p     weak\n2           8         4   -1.0    p     weak\n3           8         5    2.0    m     weak\n4           9         6   -4.0    p     weak\n5           6         1   -1.0    p     weak\n6           6         2   -1.0    p     weak\n7           6         3   -1.0    p     weak\n8           9         7    1.0    m     weak\ndf_x\n   id    x    y    z  value\n0   0  NaN  NaN  NaN      0\n1   4  4.0  1.0  3.0     -1\n2   5  5.0  1.0  3.0     -1\n3   8  4.0  1.0  2.0      3\ndf_y_copy\n   id  x  y  z  value\n0   1  1  1  3     -1\n1   2  2  1  3     -1\n2   3  3  1  3     -1\n5   6  2  1  2     -1\n6   7  3  1  2     -1\n8   9  3  1  1      5\n\n---------------\nCounter cicle 9 -&gt; time cicle 0.07696938514709473 seconds\n---------------\npossible_arc\n   start  end\n0      8    3\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         5    1.0    p   strong\n1           0         7    0.0    p     weak\n2           8         4   -1.0    p     weak\n3           8         5    2.0    m     weak\n4           9         6   -4.0    p     weak\n5           6         1   -1.0    p     weak\n6           6         2   -1.0    p     weak\n7           6         3   -1.0    p     weak\n8           9         7    1.0    m     weak\n\nFind the root, the arc from X\u2080 to X\u2098\nRoot\nstart_real      0\nend_real        5\nvalue         NaN\ntype          NaN\nstrength      NaN\nName: 0, dtype: object\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         7    NaN  NaN      NaN\n1           8         4    NaN  NaN      NaN\n2           8         5    NaN  NaN      NaN\n3           9         6    NaN  NaN      NaN\n4           6         1    NaN  NaN      NaN\n5           6         2    NaN  NaN      NaN\n6           6         3    NaN  NaN      NaN\n7           9         7    NaN  NaN      NaN\n\nAdd the arc from X\u2096 to X\u2097\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         7    NaN  NaN      NaN\n1           8         4    NaN  NaN      NaN\n2           8         5    NaN  NaN      NaN\n3           9         6    NaN  NaN      NaN\n4           6         1    NaN  NaN      NaN\n5           6         2    NaN  NaN      NaN\n6           6         3    NaN  NaN      NaN\n7           9         7    NaN  NaN      NaN\n8           8         3    NaN  NaN      NaN\n\nCreate `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       7.0    NaN\n1         7.0       9.0    NaN\n2         9.0       6.0    NaN\n3         6.0       1.0    NaN\n4         6.0       2.0    NaN\n5         6.0       3.0    NaN\n6         3.0       8.0    NaN\n7         8.0       4.0    NaN\n8         8.0       5.0    NaN\n\nAdd `value` of the outermost nodes in `df_arc_direct_tree`\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       7.0    NaN\n1         7.0       9.0    NaN\n2         9.0       6.0    NaN\n3         6.0       1.0   -1.0\n4         6.0       2.0   -1.0\n5         6.0       3.0    NaN\n6         3.0       8.0    NaN\n7         8.0       4.0   -1.0\n8         8.0       5.0   -1.0\n\nCompute the values of the arcs at the middle and root of the tree based on the sum of the outermost arcs and the node values.\ndf_arc_direct_tree\n   start_tree  end_tree  value\n0         0.0       7.0    1.0\n1         7.0       9.0    2.0\n2         9.0       6.0   -3.0\n3         6.0       1.0   -1.0\n4         6.0       2.0   -1.0\n5         6.0       3.0    0.0\n6         3.0       8.0    1.0\n7         8.0       4.0   -1.0\n8         8.0       5.0   -1.0\n\nAdd `values` from `df_arc_direct_tree` to `df_arc_positive`\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         7    1.0  NaN      NaN\n1           8         4   -1.0  NaN      NaN\n2           8         5   -1.0  NaN      NaN\n3           9         6   -3.0  NaN      NaN\n4           6         1   -1.0  NaN      NaN\n5           6         2   -1.0  NaN      NaN\n6           6         3    0.0  NaN      NaN\n7           9         7    2.0  NaN      NaN\n8           8         3    1.0  NaN      NaN\n\nCompare `df_positive` and `df_arc_direct_tree` to classify the arcs in type (`p` or `m`) and the strength in (`strong` or `weak`)\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         7    1.0    p   strong\n1           8         4   -1.0    p     weak\n2           8         5   -1.0    p     weak\n3           9         6   -3.0    p     weak\n4           6         1   -1.0    p     weak\n5           6         2   -1.0    p     weak\n6           6         3    0.0    p     weak\n7           9         7    2.0    m     weak\n8           8         3    1.0    m     weak\ndf_x\n   id    x    y    z  value\n0   0  NaN  NaN  NaN      0\n1   1  1.0  1.0  3.0     -1\n2   2  2.0  1.0  3.0     -1\n3   3  3.0  1.0  3.0     -1\n4   4  4.0  1.0  3.0     -1\n5   5  5.0  1.0  3.0     -1\n6   6  2.0  1.0  2.0     -1\n7   7  3.0  1.0  2.0     -1\n8   8  4.0  1.0  2.0      3\n9   9  3.0  1.0  1.0      5\ndf_y_copy\nEmpty DataFrame\nColumns: [id, x, y, z, value]\nIndex: []\n\nAlgoritm completed !!!\n------------------------\ndf_arc_positive\n   start_real  end_real  value type strength\n0           0         7    1.0    p   strong\n1           8         4   -1.0    p     weak\n2           8         5   -1.0    p     weak\n3           9         6   -3.0    p     weak\n4           6         1   -1.0    p     weak\n5           6         2   -1.0    p     weak\n6           6         3    0.0    p     weak\n7           9         7    2.0    m     weak\n8           8         3    1.0    m     weak\n\ndf_x\n   id    x    y    z  value\n0   0  NaN  NaN  NaN      0\n1   1  1.0  1.0  3.0     -1\n2   2  2.0  1.0  3.0     -1\n3   3  3.0  1.0  3.0     -1\n4   4  4.0  1.0  3.0     -1\n5   5  5.0  1.0  3.0     -1\n6   6  2.0  1.0  2.0     -1\n7   7  3.0  1.0  2.0     -1\n8   8  4.0  1.0  2.0      3\n9   9  3.0  1.0  1.0      5\n\ndf_y_copy\nEmpty DataFrame\nColumns: [id, x, y, z, value]\nIndex: []\nTiempo de ejecuci\u00f3n: 0.7430 segundos\n</code></pre> <p>If you assign the result of the main function to a variable like <code>df_pit = main(df_y, df_arc, True)</code>, you can export it to a <code>.csv</code> file using the pandas package.</p> <pre><code>df_pit = main(df_y, df_arc, True)\ndf_pit.to_csv(\"df_pit.csv\", index=False)\n</code></pre>"},{"location":"Examples/Example3/","title":"Basic Example","text":"<p>This is a basic example of how to use the <code>py-lerchs-grossmann</code> package to obtain the optimum pit in a 3d block model.</p>"},{"location":"Examples/Example3/#block-model","title":"Block Model","text":"<p>The block model must have the following columns: <code>id</code> and <code>value</code>, for the proper performance of the package. Other columns or extra data do not affect the performance of the package. In this example, the columns <code>x</code>, <code>y</code>, and <code>z</code> are not used by the algorithm.</p>"},{"location":"Examples/Example3/#example-block_modelcsv","title":"Example: block_model.csv","text":"id x y z cu 1 10 10 10 0.0 2 10 10 20 0.0 3 10 10 30 0.0 4 10 10 40 0.0 5 10 10 50 0.0 ... ... ... ... ... 1125 150 150 50 0.0 <p>In this case, the block model doesn't include the <code>value</code> of each block, so we need to calculate it.</p> \\[ \\text{value} = \\left( \\text{price} + \\text{credit}_\\text{subproducts} - \\text{cost}_\\text{melting/refine/sell} \\right) \\cdot \\left( \\frac{\\text{Copper}_\\text{grade}}{100} \\right) \\cdot \\left( \\frac{\\text{metallurgy}_\\text{recovery}}{100} \\right) \\cdot 2204.6(\\frac{lb}{ton}) \\cdot \\left( \\text{volume} \\cdot \\text{density} \\right) - \\left( \\text{cost}_\\text{mine} + \\text{cost}_\\text{administration/plant} \\right) \\cdot \\left( \\text{volume} \\cdot \\text{density} \\right) \\] \\[ \\text{price} = 2.2[USD/lb] \\] \\[ \\text{credit}_\\text{subproducts} = 0.65  [USD/lb] \\] \\[ \\text{cost}_\\text{melting/refine/sell} = 0.66  [USD/lb] \\] \\[ \\text{metallurgy}_\\text{recovery} = 82  [\\%] \\] \\[ \\text{density} = 2.7  [ton/m^3] \\] \\[ \\text{volume} = 10 * 10 * 10  [m^3] \\] \\[ \\text{cost}_\\text{mine} = 1.8  [USD/ton] \\] \\[ \\text{cost}_\\text{administration/plant} = 6.5  [USD/ton] \\] <p>In Python, using the pandas package looks like this:</p> <pre><code>import pandas as pd\nimport py_lerchs_grossmann as plg\n\ndf = pd.read_csv(\"block_model.csv\")\n\nprice = 2.2  # USD/lb\ncredit_subproducts = 0.65  # USD/lb\ncost_melting_refine_sell = 0.66  # USD/lb\nmetallurgy_recovery = 82  # %\ndensity = 2.7  # ton/m3\nvolume = 10 * 10 * 10  # m3\ncost_mine = 1.8  # USD/ton\ncost_administration_plant = 6.5  # USD/ton\n\ndf[\"value\"] = (price + credit_subproducts - cost_melting_refine_sell) * (\n    df[\"cu\"] / 100\n) * (metallurgy_recovery / 100) * 2204.6 * (volume * density) - (\n    cost_mine + cost_administration_plant\n) * (\n    volume * density\n)\n</code></pre>"},{"location":"Examples/Example3/#arc-dataframe","title":"Arc DataFrame","text":"<p>The Arc DataFrame is a table that contains the connections\u2014or arcs\u2014between blocks. In this case, the Arc DataFrame is not available, but it can be generated using the <code>build_df_arc()</code> function from the <code>py_lersch_groosmann package</code>.</p> <pre><code>df_arc = plg.build_df_arc(df, block_size=10)\n</code></pre>"},{"location":"Examples/Example3/#the-main-funtion","title":"The <code>main</code> funtion","text":"<p>Given the block model containing <code>id</code> and <code>value</code>, along with the <code>Arc DataFrame</code>, we can apply the <code>main</code> function.</p>"},{"location":"Examples/Example3/#complete-code","title":"Complete code","text":"<pre><code>import pandas as pd\nimport py_lerchs_grossmann as plg\n\ndf = pd.read_csv(\"block_model.csv\")\n\nprice = 2.2  # USD/lb\ncredit_subproducts = 0.65  # USD/lb\ncost_melting_refine_sell = 0.66  # USD/lb\nmetallurgy_recovery = 82  # %\ndensity = 2.7  # ton/m3\nvolume = 10 * 10 * 10  # m3\ncost_mine = 1.8  # USD/ton\ncost_administration_plant = 6.5  # USD/ton\n\ndf[\"value\"] = (price + credit_subproducts - cost_melting_refine_sell) * (\n    df[\"cu\"] / 100\n) * (metallurgy_recovery / 100) * 2204.6 * (volume * density) - (\n    cost_mine + cost_administration_plant\n) * (\n    volume * density\n)\n\ndf_arc = plg.build_df_arc(df, block_size=10)\n\ndf_pit = plg.main(df, df_arc, False)\n\ndf_pit.to_csv(\"block_model_on_pit.csv\", index=False)\n</code></pre>"},{"location":"Examples/Example3/#output","title":"Output","text":"<pre><code>Algoritm completed !!!\n------------------------\ndf_arc_positive\n     start_real  end_real         value type strength\n0           0.0      75.0 -22410.000000    p     weak\n1           0.0     144.0  -7495.364446    p     weak\n2           0.0     351.0 -16122.143626    p     weak\n3           0.0     491.0  -5432.787790    p     weak\n4           0.0     496.0 -22410.000000    p     weak\n..          ...       ...           ...  ...      ...\n640       923.0    1004.0  19968.953722    m     weak\n641       857.0     928.0  17429.778104    m     weak\n642       924.0    1005.0   6562.205458    m     weak\n643       868.0     939.0   4854.065356    m     weak\n644       772.0     853.0   4802.005086    m     weak\n\n[645 rows x 5 columns]\n\ndf_x\n      id      x      y     z    value   cu\n0      0    NaN    NaN   NaN      0.0  NaN\n1      5   10.0   10.0  50.0 -22410.0  0.0\n2     10   10.0   20.0  50.0 -22410.0  0.0\n3     15   10.0   30.0  50.0 -22410.0  0.0\n4     20   10.0   40.0  50.0 -22410.0  0.0\n..   ...    ...    ...   ...      ...  ...\n430  935  130.0   70.0  50.0 -22410.0  0.0\n431  940  130.0   80.0  50.0 -22410.0  0.0\n432  945  130.0   90.0  50.0 -22410.0  0.0\n433  950  130.0  100.0  50.0 -22410.0  0.0\n434  955  130.0  110.0  50.0 -22410.0  0.0\n\n[435 rows x 6 columns]\n\ndf_y_copy\n       id    x    y   z   cu    value\n13     70   10  140  50  0.0 -22410.0\n14     75   10  150  50  0.0 -22410.0\n38    139   20  130  40  0.0 -22410.0\n40    144   20  140  40  0.0 -22410.0\n41    145   20  140  50  0.0 -22410.0\n..    ...  ...  ...  ..  ...      ...\n640  1105  150  110  50  0.0 -22410.0\n641  1110  150  120  50  0.0 -22410.0\n642  1115  150  130  50  0.0 -22410.0\n643  1120  150  140  50  0.0 -22410.0\n644  1125  150  150  50  0.0 -22410.0\n\n[211 rows x 6 columns]\nRuntime: 520.9424 seconds\n</code></pre>"},{"location":"Examples/Example3/#images","title":"Images","text":"<ol> <li>Original block model with cutoff grade of zero. (Before running the algorithm)</li> </ol> <ol> <li>Original block model with a cutoff grade of 0.5. (Before running the algorithm)</li> </ol> <ol> <li>Original block model with cutoff grade of zero. (After running the algorithm)</li> </ol> <ol> <li>Original block model with cutoff grade of 0.5. (After running the algorithm)</li> </ol>"}]}